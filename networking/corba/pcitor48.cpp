// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.1

#include <OB/CORBAClient.h>
#include <pcitor48.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010100L)
#       error ORBacus version mismatch!
#   endif
#endif

::OB::TypeCodeConst _tc_pcitor48(
"012719080e00000029000000012719081100000049444c3a706369746f7234383a312e300044d"
"b4009000000706369746f72343800"
);

//
// IDL:pcitor48:1.0
//
const char* pcitor48::ids_[] =
{
    "IDL:pcitor48:1.0",
    0
};

void
OBDuplicate(pcitor48_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(pcitor48_ptr p)
{
    if(p)
        p -> _remove_ref();
}

pcitor48_ptr
pcitor48::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        pcitor48_ptr v = dynamic_cast<pcitor48_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_pcitor48* val = new OBProxy_pcitor48;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

pcitor48_ptr
pcitor48::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        pcitor48_ptr v = dynamic_cast<pcitor48_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

pcitor48_ptr
pcitor48::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        pcitor48_ptr v = dynamic_cast<pcitor48_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_pcitor48* val = new OBProxy_pcitor48;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

pcitor48_ptr
pcitor48::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
pcitor48::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(pcitor48_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(pcitor48_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    pcitor48_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_pcitor48* _ob_obj = new OBProxy_pcitor48;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = pcitor48::_nil();
}

void
operator<<=(CORBA::Any& any, pcitor48_ptr* v)
{
    any.replace(_tc_pcitor48, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, pcitor48_ptr v)
{
    pcitor48_ptr val = pcitor48::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, pcitor48_ptr& v)
{
    if(any.check_type(_tc_pcitor48))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<pcitor48_ptr>(val)))
            {
                OBProxy_pcitor48* obj = new OBProxy_pcitor48;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = pcitor48::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:pcitor48:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_pcitor48::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_pcitor48;
}

const char**
OBProxy_pcitor48::_OB_ids() const
{
    return ::pcitor48::ids_;
}

//
// IDL:pcitor48/SetLed:1.0
//
void
OBProxy_pcitor48::SetLed(CORBA::Short _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_pcitor48_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_pcitor48_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> SetLed(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:pcitor48/Read:1.0
//
CORBA::Boolean
OBProxy_pcitor48::Read(CORBA::Short _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_pcitor48_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_pcitor48_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> Read(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:pcitor48/Status:1.0
//
void
OBProxy_pcitor48::Status(CORBA::Short _ob_a0,
                         CORBA::String_out _ob_a1,
                         char*& _ob_a2)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_pcitor48_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_pcitor48_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> Status(_ob_a0, _ob_a1, _ob_a2);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:pcitor48:1.0
//
void
OBDuplicate(OBStubImpl_pcitor48_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_pcitor48_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:pcitor48/SetLed:1.0
//
void
OBMarshalStubImpl_pcitor48::SetLed(CORBA::Short _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("SetLed", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_short(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:pcitor48/Read:1.0
//
CORBA::Boolean
OBMarshalStubImpl_pcitor48::Read(CORBA::Short _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("Read", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_short(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::Boolean _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_boolean();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:pcitor48/Status:1.0
//
void
OBMarshalStubImpl_pcitor48::Status(CORBA::Short _ob_a0,
                                   CORBA::String_out _ob_a1,
                                   char*& _ob_a2)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("Status", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_short(_ob_a0);
                _ob_out -> write_string(_ob_a2);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                try
                {
                    _ob_a1 = _ob_in -> read_string();
                    CORBA::string_free(_ob_a2);
                    _ob_a2 = 0;
                    _ob_a2 = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}
