static const char *RcsId = "$Header: /opt2/cvs//TANGO/DeviceServer/PCI-TOR48/PCITOR48Class.cpp,v 1.1.1.1 2002/05/15 10:05:03 raph Exp $";
//+=============================================================================
//
// file :        PCITOR48Class.cpp
//
// description : C++ source for the PCITOR48Class. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the PCITOR48 once per process.
//
// project :     TANGO Device Server
//
// $Author: raph $
//
// $Revision: 1.1.1.1 $
//
// $Log: PCITOR48Class.cpp,v $
// Revision 1.1.1.1  2002/05/15 10:05:03  raph
// initial cvs import
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


#include <tango.h>

#include <PCITOR48.h>
#include <PCITOR48Class.h>


namespace PCITOR48
{


//+----------------------------------------------------------------------------
//
// method : 		DevWriteCmd::DevWriteCmd()
// 
// description : 	constructor for the command of the PCITOR48.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevWriteCmd::DevWriteCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc )
:Command(name,in,out,in_desc,out_desc)
{
}
//
//	Constructor without in/out parameters description
//
DevWriteCmd::DevWriteCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevWriteCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevWriteCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevWriteCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevWriteCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevWriteCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<PCITOR48 *>(device))->dev_write(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		DevReadCmd::DevReadCmd()
// 
// description : 	constructor for the command of the PCITOR48.
//
// In : - name : The command name
//		- in : The input parameter type
//		- out : The output parameter type
//		- in_desc : The input parameter description
//		- out_desc : The output parameter description
//
//-----------------------------------------------------------------------------
DevReadCmd::DevReadCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out,
								const char		*in_desc,
				       			const char		*out_desc )
:Command(name,in,out,in_desc,out_desc)
{
}
//
//	Constructor without in/out parameters description
//
DevReadCmd::DevReadCmd(	const char		*name,
								Tango::CmdArgType in,
				       			Tango::CmdArgType out)
:Command(name,in,out)
{
}




//+----------------------------------------------------------------------------
//
// method : 		DevReadCmd::is_allowed()
// 
// description : 	method to test whether command is allowed or not in this
//			state. In this case, the command is allowed only if
//			the device is in ON state
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns :	boolean - true == is allowed , false == not allowed
//
//-----------------------------------------------------------------------------
bool DevReadCmd::is_allowed(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return true;
}




//+----------------------------------------------------------------------------
//
// method : 		DevReadCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DevReadCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DevReadCmd::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);

	return insert((static_cast<PCITOR48 *>(device))->dev_read(argin));
}


//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
PCITOR48Class *PCITOR48Class::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		PCITOR48Class::PCITOR48Class(string &s)
// 
// description : 	constructor for the PCITOR48Class
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
PCITOR48Class::PCITOR48Class(string &s):DeviceClass(s)
{

	cout2 << "Entering PCITOR48Class constructor" << endl;
	
	cout2 << "Leaving PCITOR48Class constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		PCITOR48Class::~PCITOR48Class()
// 
// description : 	destructor for the PCITOR48Class
//
//-----------------------------------------------------------------------------
PCITOR48Class::~PCITOR48Class()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		PCITOR48Class::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
PCITOR48Class *PCITOR48Class::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new PCITOR48Class(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

PCITOR48Class *PCITOR48Class::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		PCITOR48Class::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void PCITOR48Class::command_factory()
{
	command_list.push_back(new DevWriteCmd("DevWrite",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"data for Port A,B,C",
		""));
	command_list.push_back(new DevReadCmd("DevRead",
		Tango::DEV_SHORT, Tango::DEV_SHORT,
		"port number 0 1 2",
		"port value 0 ON 1 OFF"));
}

//+----------------------------------------------------------------------------
//
// method : 		PCITOR48Class::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void PCITOR48Class::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	
	for (long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i] << endl;
						
		// Create device and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new PCITOR48(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before id database used.
		//---------------------------------------------
		if (Tango::Util::_UseDb == true)
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
}

}	// namespace
