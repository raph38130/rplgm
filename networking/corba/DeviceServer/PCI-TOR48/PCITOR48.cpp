static const char *RcsId = "$Header: /opt2/cvs//TANGO/DeviceServer/PCI-TOR48/PCITOR48.cpp,v 1.1.1.1 2002/05/15 10:05:03 raph Exp $";
//+=============================================================================
//
// file :         PCITOR48.cpp
//
// description :  C++ source for the PCITOR48 and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                PCITOR48 are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author: raph $
//
// $Revision: 1.1.1.1 $
//
// $Log: PCITOR48.cpp,v $
// Revision 1.1.1.1  2002/05/15 10:05:03  raph
// initial cvs import
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


//===================================================================
//
//	The folowing table gives the correspondance
//	between commands and method's name.
//
//	Command's name	|	Method's name
//	----------------------------------------
//	DevState	|	dev_state()
//	DevStatus	|	dev_status()
//	DevWrite	|	dev_write()
//	DevRead	|	dev_read()
//
//===================================================================



#include <tango.h>
#include <PCITOR48.h>

namespace PCITOR48
{

//+----------------------------------------------------------------------------
//
// method : 		PCITOR48::PCITOR48(string &s)
// 
// description : 	constructor for simulated PCITOR48
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
PCITOR48::PCITOR48(Tango::DeviceClass *cl,string &s):Tango::DeviceImpl(cl,s.c_str())
{
	init_device();
}

PCITOR48::PCITOR48(Tango::DeviceClass *cl,const char *s):Tango::DeviceImpl(cl,s)
{
	init_device();
}

PCITOR48::PCITOR48(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::DeviceImpl(cl,s,d)
{
	init_device();
}

void PCITOR48::init_device()
{
	cout << "PCITOR48::PCITOR48() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
}

//+----------------------------------------------------------------------------
//
// method : 		PCITOR48::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void PCITOR48::always_executed_hook()
{

	cout2 << "In always_executed_hook method" << endl;
	
}

//+------------------------------------------------------------------
/**
 *	method:	PCITOR48::dev_write
 *
 *	description:	method to execute "DevWrite"
 *	24 bits write
 *
 * @param	argin	data for Port A,B,C
 *
 */
//+------------------------------------------------------------------
void PCITOR48::dev_write(Tango::DevLong argin)
{
	cout2 << "PCITOR48::dev_write(): entering... !" << endl;

	//	Add your own code to control device here

}

//+------------------------------------------------------------------
/**
 *	method:	PCITOR48::dev_read
 *
 *	description:	method to execute "DevRead"
 *	8 bits read
 *
 * @param	argin	port number 0 1 2
 * @return	port value 0 ON 1 OFF
 *
 */
//+------------------------------------------------------------------
Tango::DevShort PCITOR48::dev_read(Tango::DevShort argin)
{
	Tango::DevShort	argout ;
	cout2 << "PCITOR48::dev_read(): entering... !" << endl;

	//	Add your own code to control device here

	return argout;
}

}	//	namespace
