// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.1

#include <OB/CORBAServer.h>
#include <pcitor48_skel.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010100L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:pcitor48/SetLed:1.0
//
void
POA_pcitor48::_OB_op_SetLed(OB::Upcall_ptr _ob_up)
{
    CORBA::Short _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    _ob_a0 = _ob_in -> read_short();
    _OB_postUnmarshal(_ob_up);
    SetLed(_ob_a0);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:pcitor48/Read:1.0
//
void
POA_pcitor48::_OB_op_Read(OB::Upcall_ptr _ob_up)
{
    CORBA::Short _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    _ob_a0 = _ob_in -> read_short();
    _OB_postUnmarshal(_ob_up);
    CORBA::Boolean _ob_r = Read(_ob_a0);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    _ob_out -> write_boolean(_ob_r);
    _OB_postMarshal(_ob_up);
}

//
// IDL:pcitor48/Status:1.0
//
void
POA_pcitor48::_OB_op_Status(OB::Upcall_ptr _ob_up)
{
    CORBA::Short _ob_a0;
    CORBA::String_var _ob_a1;
    OB::StrForStruct _ob_a2;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    _ob_a0 = _ob_in -> read_short();
    _ob_a2 = _ob_in -> read_string();
    _OB_postUnmarshal(_ob_up);
    Status(_ob_a0, _ob_a1.out(), _ob_a2.inout());
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    _ob_out -> write_string(_ob_a1.in());
    _ob_out -> write_string(_ob_a2.in());
    _OB_postMarshal(_ob_up);
}

//
// IDL:pcitor48:1.0
//
CORBA::Boolean
POA_pcitor48::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _ob_ids = pcitor48::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_pcitor48::_primary_interface(const PortableServer::ObjectId&,
                                 PortableServer::POA_ptr)
{
    return CORBA::string_dup(pcitor48::_OB_staticIds()[0]);
}

pcitor48_ptr
POA_pcitor48::_this()
{
    CORBA::Object_var obj = _OB_createReference();
    pcitor48_var result = pcitor48::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_pcitor48::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                       const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_pcitor48(poa, oid, this);
}

void
POA_pcitor48::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "Read",
        "SetLed",
        "Status"
    };
    static const CORBA::ULong _ob_numNames = 3;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // Read
        _OB_op_Read(_ob_up);
        return;

    case 1: // SetLed
        _OB_op_SetLed(_ob_up);
        return;

    case 2: // Status
        _OB_op_Status(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:pcitor48:1.0
//
OBDirectStubImpl_pcitor48::OBDirectStubImpl_pcitor48(PortableServer::POA_ptr poa,
                                                     const PortableServer::ObjectId& oid,
                                                     PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif

//
// IDL:pcitor48/SetLed:1.0
//
void
OBDirectStubImpl_pcitor48::SetLed(CORBA::Short _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "SetLed");
    dynamic_cast<POA_pcitor48*>(_ob_servant_) -> SetLed(_ob_a0);
}

//
// IDL:pcitor48/Read:1.0
//
CORBA::Boolean
OBDirectStubImpl_pcitor48::Read(CORBA::Short _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "Read");
    return dynamic_cast<POA_pcitor48*>(_ob_servant_) -> Read(_ob_a0);
}

//
// IDL:pcitor48/Status:1.0
//
void
OBDirectStubImpl_pcitor48::Status(CORBA::Short _ob_a0,
                                  CORBA::String_out _ob_a1,
                                  char*& _ob_a2)
{
    OB::InvocationHandler _ob_handler(this, "Status");
    dynamic_cast<POA_pcitor48*>(_ob_servant_) -> Status(_ob_a0, _ob_a1, _ob_a2);
}
