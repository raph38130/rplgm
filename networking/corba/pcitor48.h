// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.1

#ifndef ___pcitor48_h__
#define ___pcitor48_h__

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010100L)
#       error ORBacus version mismatch!
#   endif
#endif

class pcitor48;
typedef pcitor48* pcitor48_ptr;
typedef pcitor48* pcitor48Ref;

extern OB::TypeCodeConst _tc_pcitor48;

void OBDuplicate(pcitor48_ptr);
void OBRelease(pcitor48_ptr);

void OBMarshal(pcitor48_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(pcitor48_ptr&, OB::InputStreamImpl*);

typedef OB::ObjVar< pcitor48 > pcitor48_var;
typedef OB::ObjOut< pcitor48 > pcitor48_out;

class OBStubImpl_pcitor48;
typedef OBStubImpl_pcitor48* OBStubImpl_pcitor48_ptr;

void OBDuplicate(OBStubImpl_pcitor48_ptr);
void OBRelease(OBStubImpl_pcitor48_ptr);

typedef OB::ObjVar< OBStubImpl_pcitor48 > OBStubImpl_pcitor48_var;

//
// IDL:pcitor48:1.0
//
class pcitor48 : virtual public CORBA::Object
{
    pcitor48(const pcitor48&);
    void operator=(const pcitor48&);

protected:

    static const char* ids_[];

public:

    pcitor48() { }
    virtual ~pcitor48() { }

    typedef pcitor48_ptr _ptr_type;
    typedef pcitor48_var _var_type;

    static inline pcitor48_ptr
    _duplicate(pcitor48_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline pcitor48_ptr
    _nil()
    {
        return 0;
    }

    static pcitor48_ptr _narrow(CORBA::Object_ptr);
    static pcitor48_ptr _unchecked_narrow(CORBA::Object_ptr);

    static pcitor48_ptr _narrow(CORBA::AbstractBase_ptr);
    static pcitor48_ptr _unchecked_narrow(CORBA::AbstractBase_ptr);

    static const char** _OB_staticIds();

    //
    // IDL:pcitor48/SetLed:1.0
    //
    virtual void SetLed(CORBA::Short number) = 0;

    //
    // IDL:pcitor48/Read:1.0
    //
    virtual CORBA::Boolean Read(CORBA::Short number) = 0;

    //
    // IDL:pcitor48/Status:1.0
    //
    virtual void Status(CORBA::Short number,
                        CORBA::String_out msg,
                        char*& test) = 0;
};

//
// IDL:pcitor48:1.0
//
class OBProxy_pcitor48 : virtual public ::pcitor48,
                         virtual public OBCORBA::Object
{
    OBProxy_pcitor48(const OBProxy_pcitor48&);
    void operator=(const OBProxy_pcitor48&);

protected:

    virtual OB::MarshalStubImpl_ptr _OB_createMarshalStubImpl();

public:

    OBProxy_pcitor48() { }
    virtual ~OBProxy_pcitor48() { }

    virtual const char** _OB_ids() const;

    //
    // IDL:pcitor48/SetLed:1.0
    //
    void SetLed(CORBA::Short number);

    //
    // IDL:pcitor48/Read:1.0
    //
    CORBA::Boolean Read(CORBA::Short number);

    //
    // IDL:pcitor48/Status:1.0
    //
    void Status(CORBA::Short number,
                CORBA::String_out msg,
                char*& test);
};

//
// IDL:pcitor48:1.0
//
class OBStubImpl_pcitor48 : virtual public OB::StubImplBase
{
    OBStubImpl_pcitor48(const OBStubImpl_pcitor48&);
    void operator=(const OBStubImpl_pcitor48&);

protected:

    OBStubImpl_pcitor48() { }

public:

    static inline OBStubImpl_pcitor48_ptr
    _duplicate(OBStubImpl_pcitor48_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline OBStubImpl_pcitor48_ptr
    _nil()
    {
        return 0;
    }

    //
    // IDL:pcitor48/SetLed:1.0
    //
    virtual void SetLed(CORBA::Short number) = 0;

    //
    // IDL:pcitor48/Read:1.0
    //
    virtual CORBA::Boolean Read(CORBA::Short number) = 0;

    //
    // IDL:pcitor48/Status:1.0
    //
    virtual void Status(CORBA::Short number,
                        CORBA::String_out msg,
                        char*& test) = 0;
};

//
// IDL:pcitor48:1.0
//
class OBMarshalStubImpl_pcitor48 : virtual public OBStubImpl_pcitor48,
                                   virtual public OB::MarshalStubImpl
{
    OBMarshalStubImpl_pcitor48(const OBMarshalStubImpl_pcitor48&);
    void operator=(const OBMarshalStubImpl_pcitor48&);

protected:

    OBMarshalStubImpl_pcitor48() { }
    friend class OBProxy_pcitor48;

public:

    //
    // IDL:pcitor48/SetLed:1.0
    //
    virtual void SetLed(CORBA::Short number);

    //
    // IDL:pcitor48/Read:1.0
    //
    virtual CORBA::Boolean Read(CORBA::Short number);

    //
    // IDL:pcitor48/Status:1.0
    //
    virtual void Status(CORBA::Short number,
                        CORBA::String_out msg,
                        char*& test);
};

//
// IDL:pcitor48:1.0
//
namespace CORBA
{

inline void
release(::pcitor48_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::pcitor48_ptr p)
{
    return p == 0;
}

inline void
release(OBStubImpl_pcitor48_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(OBStubImpl_pcitor48_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, pcitor48_ptr*);
void operator<<=(CORBA::Any&, pcitor48_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, pcitor48_ptr&);

inline void
operator<<=(CORBA::Any_var& any, pcitor48_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, pcitor48_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, pcitor48_ptr& val)
{
    return any.in() >>= val;
}

#endif
